Problem 8.1: address spaces in a paging system 


a) How many frames has the physical memory?

Physical Memory Size = 256 KiB. 
Number of frames = Physical Memory Size / Page Size
Number of frames = 256 KiB / 2048 B = (256 * 1024 B ) / 2048 B
Number of frames = 262144 B / 2048 B
Number of frames = 128


b) How many bits has an address in the logical address space and how many bits has an address in the physical address space?

We use the formula:
Address bits = log⁡2(Total Memory Size)

Logical Address Space:
The logical address space has 16 pages, as mentioned in the statement, each of size 2048 B.
Logical Memory Size = 16 * 2048 B = 32768 B
Logical Address bits = log⁡2(32768) = 15 bits

Physical Address Space:
The physical memory size is 256 KiB = 262144 B.
Physical Address bits = log⁡2(262144) = 18 bits


c) How many bits are used for the page number and how many bits are used for the offset within a page?

The logical address = the page number + the offset within the page.

Page Number Bits:
Page Number bits = log⁡2(Total Number of Pages)
Page Number bits = log⁡2(16) = 4 bits

Offset Bits:
Offset bits = log⁡2(Page Size)
Offset bits = log⁡2(2048) = 11 bits



a) Page Tables for P1 and P2

Process P1

| Page | Frame | Access Rights |
|------|-------|---------------|
| p1,0 | 8     | rwxdv         |
| p1,1 | 6     | rwxdv         |
| p1,2 | -     | rw--v         |
| p1,5 | -     | rw--v         |
| p1,6 | 11    | rwxdv         |
| p1,8 | 3     | rwxdv         |

Process P2

| Page | Frame | Access Rights |
|------|-------|---------------|
| p2,0 | 9     | r-x-v         |
| p2,1 | 12    | r-x-v         |
| p2,4 | 4     | rwxdv         |
| p2,5 | 1     | rwxdv         |
| p2,6 | -     | rw--v         |
| p2,8 | -     | rwxdv         |

b) Page Tables after Write Operations and Initializations

When P1 writes to a global variable and a dynamically allocated string, 
the data page (p1,2) and heap page (p1,5) would need to be loaded into memory. 

For P2, a function call that allocates and initializes 16 bytes on the heap
would also need the heap page (p2,6) to be loaded. 
Let's use the first free physical frames (2, 5, and 10) to load these pages.

Process P1

| Page | Frame | Access Rights |
|------|-------|---------------|
| p1,0 | 8     | rwxdv         |
| p1,1 | 6     | rwxdv         |
| p1,2 | 2     | rwxdv         | (loaded into frame 2)
| p1,5 | 5     | rwxdv         | (loaded into frame 5)
| p1,6 | 11    | rwxdv         |
| p1,8 | 3     | rwxdv         |

Process P2

| Page | Frame | Access Rights |
|------|-------|---------------|
| p2,0 | 9     | r-x-v         |
| p2,1 | 12    | r-x-v         |
| p2,4 | 4     | rwxdv         |
| p2,5 | 1     | rwxdv         |
| p2,6 | 10    | rwxdv         | (loaded into frame 10)
| p2,8 | -     | rwxdv         |

c) Shared Memory Page

When P1 and P2 establish a shared memory page, 
we'll load it into the first free frame (7).

Physical Memory Frames

| Frame | Physical Addresses | Loaded Page |
|-------|--------------------|-------------|
| 0     | 0x000-0x0FF        | OS          |
| 1     | 0x100-0x1FF        | p2,5        |
| 2     | 0x200-0x2FF        | p1,2        |
| 3     | 0x300-0x3FF        | p1,8        |
| 4     | 0x400-0x4FF        | p2,4        |
| 5     | 0x500-0x5FF        | p1,5        |
| 6     | 0x600-0x6FF        | p1,1        |
| 7     | 0x700-0x7FF        | p1,4 / p2,2 | (shared page)
| 8     | 0x800-0x8FF        | p1,0        |
| 9     | 0x900-0x9FF        | p2,0        |
| 10    | 0xA00-0xAFF        | p2,6        |
| 11    | 0xB00-0xBFF        | p1,6        |
| 12    | 0xC00-0xCFF        | p2,1        |
| 13    | 0xD00-0xDFF        | -           |
| 14    | 0xE00-0xEFF        | -           |
| 15    | 0xF00-0xFFF        | -           |

The shared page appears as p1,4 in P1 and p2,2 in P2 with read and write access:

Process P1

| Page | Frame | Access Rights |
|------|-------|---------------|
| p1,4 | 7     | rw--v         |

Process P2

| Page | Frame | Access Rights |
|------|-------|---------------|
| p2,2 | 7     | rw--v         |


Problem 8.3: memory mapped word count 

aeon@AndreiComputer:~/Documents/Operating Systems/Assignment 8$ time wc ./largetextfile.txt 
3465  645840 4524345 ./largetextfile.txt

real    0m0,160s
user    0m0,096s
sys     0m0,026s
aeon@AndreiComputer:~/Documents/Operating Systems/Assignment 8$ time ./mwc ./largetextfile.txt 
3465 645840 4524345 ./largetextfile.txt

real    0m0,114s
user    0m0,107s
sys     0m0,005s