Problem 7.1: positioning algorithms

Free blocks of the following sizes:
16KiB 8KiB 6KiB 21KiB 14KiB 10KiB

Memory requests are received in order, with the following sizes:
9KiB 11KiB 7KiB 16KiB

a) Best-fit Algorithm: This algorithm tries to find the smallest block that will accommodate the request.

    For 9 KiB request: The smallest block that can accommodate this is 10 KiB. After allocation, 1 KiB will remain.
    For 11 KiB request: The smallest block that can accommodate this is 14 KiB. After allocation, 3 KiB will remain.
    For 7 KiB request: The smallest block that can accommodate this is 8 KiB. After allocation, 1 KiB will remain.
    For 16 KiB request: We allocate the 16 KiB block.

Request 16KiB 8KiB 6KiB 21KiB 14KiB 10KiB
9KiB                                 1KiB
11KiB                          3KiB  1KiB
7KiB          1KiB             3KiB  1KiB
16KiB   0KiB  1KiB ---- -----  3KiB  1KiB

b) Worst-fit Algorithm: This algorithm tries to find the largest block.

    For 9 KiB request: The largest block is 21 KiB. After allocation, 12 KiB will remain.
    For 11 KiB request: The largest remaining block is 16 KiB. After allocation, 5 KiB will remain.
    For 7 KiB request: The largest remaining block is 14 KiB. After allocation, 7 KiB will remain.
    For 16 KiB request: We allocate the 12 KiB block left over from the first allocation, which will be inadequate, so we'll have to use the 21 KiB block.

Request 16KiB 8KiB 6KiB 21KiB 14KiB 10KiB
9KiB                    12KiB                 
11KiB    5KiB           12KiB                                 
7KiB     5KiB           12KiB 7KiB        
16KiB    5KiB ---- ----  5KiB 7KiB  -----  

c) First-fit Algorithm: This algorithm allocates the first available block that is large enough.

    For 9 KiB request: 16 KiB block is allocated. Remaining 7 KiB.
    For 11 KiB request: 21 KiB block is allocated. Remaining 10 KiB.
    For 7 KiB request: 7 KiB block is allocated. Remaining 0 KiB.
    For 16 KiB request: We'll allocate the 10 KiB block left over from the second request and use the 21KiB.

Request 16KiB 8KiB 6KiB 21KiB 14KiB 10KiB
9KiB     7KiB                                 
11KiB    7KiB           10KiB                     
7KiB     0KiB           10KiB                     
16KiB    0KiB ---- ---- 5KiB  ----- -----

d) Next-fit Algorithm: This algorithm starts from the last allocated block and tries to allocate the next available block.

    For 9 KiB request: Starting from the first block (as no previous allocations), 16 KiB is allocated. Remaining 7 KiB.
    For 11 KiB request: Starting from the 7 KiB left over, 21 KiB block is allocated. Remaining 10 KiB.
    For 7 KiB request: Starting from the 10 KiB left over, 14 KiB block is allocated. Remaining 7 KiB.
    For 16 KiB request: Starting from the 7 KiB left over, 10 KiB block left over from the second request is allocated.

Request 16KiB 8KiB 6KiB 21KiB 14KiB 10KiB
9KiB     7KiB                                 
11KiB    7KiB           10KiB                     
7KiB     7KiB           10KiB  7KiB                   
16KiB    7KiB ---- ---- 5KiB   7KiB -----




Problem 7.2: buddy system

Buddy system memory allocator with initially 1024KiB 

a) Diagram & Binary Tree

    A: 210KiB -> Allocates 256KiB (closest power of 2)
    B: 20KiB -> Allocates 32KiB
    C: 180KiB -> Allocates 256KiB
    D: 100KiB -> Allocates 128KiB
    E: 90KiB -> Allocates 128KiB
    F: 60KiB -> Allocates 64KiB
    G: 50KiB -> Allocates 64KiB
    H: 40KiB -> Allocates 64KiB

Memory after allocation: | A(256KiB) | C(256KiB) | D(128KiB) | E(128KiB) | F(64KiB) | G(64KiB) | H(64KiB) | B(32KiB) | Free(16KiB) |

Binary Tree:
     1024KiB
    /      \
  512KiB   512KiB
  /    \   /    \
256  256  256  256
     |     / \   / \
     32  128 128 128
               /   / \
              64  64 64

b) Internal Fragmentation
Internal fragmentation is the memory that's wasted inside allocated blocks. It's the difference between the allocated size and the request size.

    A: 46KiB (256-210)
    B: 12KiB (32-20)
    C: 76KiB (256-180)
    D: 28KiB (128-100)
    E: 38KiB (128-90)
    F: 4KiB (64-60)
    G: 14KiB (64-50)
    H: 24KiB (64-40)

Total internal fragmentation = 46 + 12 + 76 + 28 + 38 + 4 + 14 + 24 = 242KiB

The largest chunk of memory that can still be allocated is 16KiB as seen in the memory layout.

c) Allocation of Ith request
When F(64KiB) is deallocated, there will be a 64KiB free block. However, an allocation request I of 80KiB will require a block of 128KiB. Since there's no 128KiB contiguous free block available after deallocating F, the allocation for I (80KiB) cannot be accommodated.




Problem 7.3: page replacement algorithms

A page fault occurs:

    If there's an empty frame, the new page is loaded into that frame.
    If there's no empty frame, the page that has been in memory the longest (i.e., the "oldest" page) is removed to make space for the new page.

a) First-In-First-Out (FIFO) page replacement algorithm:

We replace the oldest page in memory, leading to more page faults when a previously accessed page is accessed again soon.

Using two frames:

Reference string: 3 | 1 | 2 | 4 | 1 | 3 | 2 | 4 | 1 | 3
Frame 0:          - | 3 | 3 | 2 | 1 | 1 | 3 | 3 | 1 | 1 
Frame 1:          - | - | 1 | 1 | 4 | 4 | 4 | 2 | 2 | 2

Number of page faults with 2 frames: 8

For three frames:

Reference string: 3 | 1 | 2 | 4 | 1 | 3 | 2 | 4 | 1 | 3
Frame 0:          - | 3 | 3 | 3 | 3 | 3 | 3 | 2 | 2 | 2 
Frame 1:          - | - | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1
Frame 2:          - | - | - | 2 | 4 | 4 | 4 | 4 | 4 | 3

Number of page faults with 3 frames: 6


b) Beladyâ€™s Optimal (BO) page replacement algorithm:

This algorithm evicts the page that will not be used for the longest period of time in the future.

For two frames:

Reference string: 3 | 1 | 2 | 4 | 1 | 3 | 2 | 4 | 1 | 3
Frame 0:          - | 3 | 3 | 3 | 4 | 4 | 2 | 2 | 1 | 1
Frame 1:          - | - | 1 | 1 | 1 | 3 | 3 | 4 | 4 | 3

Number of page faults with 2 frames: 8

For three frames:

Reference string: 3 | 1 | 2 | 4 | 1 | 3 | 2 | 4 | 1 | 3
Frame 0:          - | 3 | 3 | 3 | 3 | 3 | 2 | 2 | 1 | 1
Frame 1:          - | - | 1 | 1 | 1 | 1 | 3 | 4 | 4 | 3
Frame 2:          - | - | - | 2 | 4 | 4 | 4 | 3 | 3 | 2

Number of page faults with 3 frames: 7


c) Least Recently Used (LRU) page replacement algorithm:

LRU evicts the least recently used page.

Using two frames:

Reference string: 3 | 1 | 2 | 4 | 1 | 3 | 2 | 4 | 1 | 3
Frame 0:          - | 3 | 3 | 2 | 2 | 2 | 2 | 4 | 4 | 4
Frame 1:          - | - | 1 | 1 | 4 | 3 | 3 | 3 | 1 | 1

Number of page faults with 2 frames: 8

Using three frames:

Reference string: 3 | 1 | 2 | 4 | 1 | 3 | 2 | 4 | 1 | 3
Frame 0:          - | 3 | 3 | 3 | 3 | 3 | 3 | 2 | 2 | 2
Frame 1:          - | - | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 3
Frame 2:          - | - | - | 2 | 4 | 4 | 4 | 4 | 4 | 1

Number of page faults with 3 frames: 6